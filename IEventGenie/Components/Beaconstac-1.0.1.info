{"Name":"Beaconstac","Id":1645,"Alias":"Beaconstac","Description":"# Beaconstac details\n\nThis component binds the Beaconstac SDK for iOS so that it may be used in Xamarin.iOS projects to scan for iBeacons and add proximity enabled content delivery and notifications to your apps.\n\nThe system requirements are iOS 7+ and Bluetooth Low Energy. In your app’s ViewController class, inside ViewDidLoad method, initialize Beaconstac:\n\n\tBeaconstac bstac = Beaconstac.SharedInstance (2xx,\"ffdxxxxxxxxxxxxx3e8\");\n\n\n**On iOS 8**, you must specify \u003ccode\u003eNSLocationAlwaysUsageDescription\u003c/code\u003e in your info.plist file with a description that will be prompted to users. On first app launch, users will be prompted to allow the app to use their location for detecting beacons.\n\nThe Beaconstac class is the primary means of setting up beacon region of interest and getting callbacks on detecting beacons or when rules are triggered. The Beaconstac instance created above is used to start the beacon ranging process. The messages are delivered by callback methods.\n\nThe following code shows an example of how to use the Beaconstac to range for beacons.\n\n    public override void ViewDidLoad ()\n    \t{\n        \tbase.ViewDidLoad ();\n        \tBeaconstac bstac = Beaconstac.SharedInstance (2xx,\"aadxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx428\");\n        \tbstac.StartRangingBeacons (\"B9407F30-F5F8-466E-AFF9-25556B57FE6D\",\"MobXam\",null);\n    \t\tbstac.BeaconsRanged += (object sender, BeaconstacBeaconsRangedEventArgs e) =\u003e {\n    \t\tConsole.WriteLine (\"Ranged\" + e.BeaconsDictionary.Description);\n    \t\t};\n    \t}\n\f\n","Version":"1.0.1","Summary":"Beaconstac for Xamarin.iOS is an easy way to enable proximity marketing and location analytics through an iBeacon-compliant BLE network.","QuickStart":"Getting Started with Beaconstac\n===================\n\n\n##Beaconstac basics:\n\n**Beacons** are small Bluetooth Low Energy based transmitters that can help with detecting proximity and manage messaging in an indoor environment. Beacons are usually identified using three fields: UUID string, Major number and Minor number.\n\nA **Rule** allows you to define a set of conditions that must be satisfied in the proximity of a beacon, for actions to be performed inside the app.\n\nAn **Action** is what you want Beaconstac to do when the conditions of a rule are met. Think of it as \u0027if conditions then action\u0027\n\n##Create a Beaconstac account\n\nGo to https://developer.beaconstac.com/invite and request an invite for the Beaconstac platform. Once you receive an invitation, sign up at the link provided in the invitation and create a new account. You can get your organization-id and Developer-token from the account page in the portal, which will be used to initialize the sdk. For the convenience of the developers, a demo account has been created and its credentials pre-filled in the Example app.\n\n## Initializing Beaconstac\n\nIn your app’s ViewController class, inside ViewDidLoad method, initialize Beaconstac sharedInstance using the credentials(organization-id and developer-token) from the portal. As a first step, we will start by discovering beacons in the vicinity of the device, commonly referred to as Ranging Beacons. When beacons are ranged, the SDK generates an event “BeaconsRanged” which gives you a list of all the beacons along with their identifiers and RSSI values. You can stop ranging beacons at any point by calling stopRangingBeacons method on Beaconstac. The following code accomplishes this.\n\n    using Mobstac;\n    \n    public async override void ViewDidLoad ()\n    \t{\n    \t\tbase.ViewDidLoad ();\n    \t    this.Title = \"Select Beacon\";\n    \t    Beaconstac bstac = Beaconstac.SharedInstance (2xx,\"aadxxxxxxxxxxxx428\");\n    \t\tNSDictionary opt = new NSDictionary();\n    \t\n    // Replace the arguments with the UUID of the beacon you wish to interact with, and a unique identifier string for the region you are going to monitor, and an optional key-value \n    \t\tbstac.StartRangingBeacons(\"B9407F30-F5F8-466E-AFF9-25556B57FE6D\", \"BeaconRegion\", opt);\n    }\n\n**On iOS 8**, you must specify \u003ccode\u003eNSLocationAlwaysUsageDescription\u003c/code\u003e in your info.plist file with a description that will be prompted to your users. On first app launch, user will be prompted to allow the app to use your location for detecting beacons.\n\n##Event callbacks\nIt is possible that there are multiple beacons around the device. However, rules are usually configured to respond to proximity of a single beacon. Beaconstac SDK is smart enough to figure out which is the beacon of interest in such cases. It generates an event called “CampedOnBeacon” which returns the beacon object of interest along with all the other beacons that are ranged at that time. \n\nIf you have created Rules on the portal and all the conditions for that Rule are satisfied, the SDK generates an event “RuleTriggered” providing the RuleName and an array of Actions associated with the Rule. \n\nUse the code below to implement the generation of events from the SDK:\n\n    public override void ViewDidLoad ()\n    \t{\n    \t\t..\n    \t\t// Handling event raised when device camps on to a beacon\n    \t\tbstac.BeaconstacCampedOnBeacon += HandleBeaconstacCampedOnBeacon;\n    \t\t\t\n\t    // Handling event raised when a rule is triggered\n    \t\tbstac.BeaconstacRuleTriggered += HandleBeaconstacRuleTriggered;\n    \n\t    // Beacon ranged event handling using Lambda expression \n    \t\tbstac.BeaconsRanged += (object sender, BeaconstacBeaconsRangedEventArgs e) =\u003e {\n    \t\t\tConsole.WriteLine (\"Ranged\" + e.BeaconsDictionary.Description);\n    \t\t};\n    \t\t...\n    \t}\n    \n    \t// Event is raised when a rule is triggered\n    \tvoid HandleBeaconstacRuleTriggered (object sender, BeaconstacRuleTriggeredEventArgs e)\n    \t{\n    \t\tConsole.WriteLine (\"Rule triggered \" + e.RuleName);\n    \t}\n    \n    \t// Event is raised when device camps on a beacon\n    \tvoid HandleBeaconstacCampedOnBeacon (object sender, BeaconstacCampedOnBeaconEventArgs e)\n    \t{\n    \t\tConsole.WriteLine (\"Camped on\" + e.Beacon.BeaconKey + \" amongst available beacons \" + e.BeaconsDictionary.Description);\n    \t}\n\n\u003e Please not that you cannot test Beacon enabled app in iOS simulator","Hash":"d7d0dd2703941d8e0ce1029432dbeb69","TargetPlatforms":["ios"],"TrialHash":null}